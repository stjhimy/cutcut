#!/usr/bin/env ruby

require 'cutcut'
require 'optparse'
require 'ruby-progressbar'

options = {}
OptionParser.new do |opt|
  opt.on('--convert', 'Convert all videos in a folder') { options[:convert] = true }
  opt.on('--copy-metadata', 'Copy original video metadata') { options[:copy_metadata] = true }
  opt.on('--scale', 'SCALE_RESOLUTION') { |e| options[:scale] = e }
  opt.on('--timelapse-fps FPS', 'Timelapse FPS') { |e| options[:timelapse_fps] = e }
  opt.on('--extract-screenshots NUMBER', 'Screenshots per second') { |e| options[:extract_screenshots] = e }
  opt.on('--speed NUMBER', 'Video speed') { |e| options[:speed] = e }
end.parse!

pwd = ENV['PWD']
options[:input_dir] ||= pwd
options[:copy_metadata] ||= false

files = Dir[File.join(options[:input_dir], '/*.mp4')]
folders = Dir.glob(File.join(options[:input_dir], '/*')).select { |e| File.directory?(e) }
progressbar = ProgressBar.create(title: 'Converting', starting_at: 0, total: files.count + folders.count)

puts "#{files.count + folders.count} files found"

files.each do |file|
  media = CutCut::Media.new(input: file)
  scale = options[:scale] || '1920:1080'
  speed = options[:speed]
  media.convert(copy_metadata: options[:copy_metadata], scale: scale, speed: speed)
  media.extract_screenshots(fps: options[:extract_screenshots], copy_metadata: true) if options[:extract_screenshots]
  progressbar.increment
end

folders.each do |folder|
  timelapse = CutCut::Timelapse.new(input: folder, output: File.join(options[:input_dir], File.basename(folder) + '.mp4'))
  scale = options[:scale] || '1920:1080'
  timelapse.convert(fps: options[:timelapse_fps] || 30, scale: scale)
  progressbar.increment
end

puts "\n Finished!"
